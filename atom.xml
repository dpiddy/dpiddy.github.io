<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dan Peterson</title><link>https://danp.net/</link><description>Recent content on Dan Peterson</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Mar 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://danp.net/atom.xml" rel="self" type="application/rss+xml"/><item><title>Mapping Halifax Traffic Calming Requests</title><link>https://danp.net/posts/mapping-halifax-traffic-calming-requests/</link><pubDate>Wed, 03 Mar 2021 12:00:00 +0000</pubDate><guid>https://danp.net/posts/mapping-halifax-traffic-calming-requests/</guid><description>Halifax has a systemic road safety problem. One way it manifests is people driving too fast, especially on residential streets.
Recently, Halifax Regional Council mostly approved their 2021 capital budget. It includes $1 million for traffic calming and the final budget may include $1 million more. Read more about that here or here.
The city publishes a ranked list of approved requests. Not all requests are approved due to rules that contribute to the systemic problem.</description></item><item><title>Injecting errors to test idempotency</title><link>https://danp.net/posts/injecting-errors-to-test-idempotency/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>https://danp.net/posts/injecting-errors-to-test-idempotency/</guid><description>As part of Heroku Private Spaces we attach extra Elastic Network Interfaces to instances, and we do that in Go with aws-sdk-go.
The process isn&amp;rsquo;t the most idempotent and we recently discovered we were occasionally leaking ENIs. This could happen if we created an ENI and then encountered an error later in the process, such as when attaching it to an instance. I set out this morning to find a better way.</description></item><item><title>Reducing nesting in Go functions with early returns</title><link>https://danp.net/posts/reducing-go-nesting/</link><pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate><guid>https://danp.net/posts/reducing-go-nesting/</guid><description>One of my favorite localized Go refactorings is reducing nesting by using return as early as possible. Take this example, based on a recently-refactored function at Heroku:
func example() error { if err := start(); err != nil { existing, err := fetchExisting() if err != nil { return err } if existing.IsWorking() { return nil } else { return errors.New(&amp;#34;found existing but it&amp;#39;s not working&amp;#34;) } } return nil } This can be hard to follow due to nesting inside if .</description></item><item><title>Using postgression on Travis CI</title><link>https://danp.net/posts/postgression-on-travis-ci/</link><pubDate>Sun, 12 May 2013 00:00:00 +0000</pubDate><guid>https://danp.net/posts/postgression-on-travis-ci/</guid><description>At Heroku we use Travis CI to run project tests on push to GitHub. While Travis CI offers PostgreSQL in their environment, it&amp;rsquo;s version 9.1. A project I&amp;rsquo;m working on recently started using PostgreSQL 9.2&amp;rsquo;s JSON data type, which 9.1 does not have.
Needing 9.2, I searched for ways to make it available in the Travis CI environment. I found guides that suggested upgrading PostgreSQL in a before_script but I didn&amp;rsquo;t have much luck with that approach.</description></item><item><title>Introduction to Ledger</title><link>https://danp.net/posts/introduction-to-ledger/</link><pubDate>Sun, 28 Aug 2011 00:00:00 +0000</pubDate><guid>https://danp.net/posts/introduction-to-ledger/</guid><description>Since July 30th, I&amp;rsquo;ve been using ledger (on GitHub) to track my personal finances. What did I use before? I&amp;rsquo;m ashamed to say nothing beyond my banks' sites.
I stumbled upon ledger via this blog post, linked from Hacker News. It took me a while to try it, for a few reasons. First, I had a weird notion that there would be a better time in my various &amp;ldquo;fiscal cycles&amp;rdquo; to start using such a thing.</description></item></channel></rss>